"Flesch",
"Flesch.Kincaid")
# create empty dataframe
complexity_eu <- data.frame()
# make a clean corpus object
corpus_speeches <- speeches %>%
select(speaker, text) %>%
corpus(text_field = "text")
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
dfm_group(groups = speaker) %>%
textstat_readability(text, complex_method) # specify method here as character object created above
testm <- as.matrix(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "username")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(text, complex_method) # specify method here as character object created above
testm <- as.matrix(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "username")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
corpus_speeches %>%
textstat_readability(text, "Flesch")
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
mutate(complex_method = textstat_readability(text, complex_method)) # specify method here as character object created above
testm <- as.matrix(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "username")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- textstat_readability(corpus_speeches$text, complex_method) # specify method here as character object created above
testm <- as.matrix(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "username")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
?textstat_readability
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(corpus_speeches$text, complex_method) # specify method here as character object created above
testm <- as.matrix(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "username")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# specify different complexity measures to explore
methods <- c("meanSentenceLength",
"meanWordSyllables",
"Flesch",
"Flesch.Kincaid")
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(complex_method) # specify method here as character object created above
testm <- as.matrix(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "username")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(complex_method) # specify method here as character object created above
testm <- as.data.frame(test) #convert to a matrix
#rename column
#colnames(testm) <- "corr_may"
#create column variable from rownames
testdm <- tibble::rownames_to_column(testm, "speaker")
#record method in new column variable
testm$method <- complex_method
#record speaker
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(complex_method) # specify method here as character object created above
testm <- as.data.frame(test) #convert to a matrix
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# create empty dataframe
complexity_eu <- data.frame()
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(complex_method) # specify method here as character object created above
testm <- as.data.frame(test) #convert to a matrix
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(complex_method) # specify method here as character object created above
testm <- as.data.frame(test) #convert to a matrix
testm$method <- complex_method
#bind all together
complexity_eu <- rbind(complexity_eu, testm)
}
# loop across methods types
for (i in seq_along(methods)) {
# pass method to character string object
complex_method <- methods[[i]]
# estimate complexity, grouping by username
test <- corpus_speeches %>%
textstat_readability(complex_method) # specify method here as character object created above
testm <- as.data.frame(test) #convert to a matrix
testm$method <- complex_method
#bind all together
complexity_eu <- complexity_eu %>%
full_join(testm)
}
complexity_eu
unique(complexity_eu$document)
library(questionr)
freq(complexity_eu$document)
# create empty dataframe
head(speeches)
speeches <- speeches %>%
mutate(meanSentenceLength = textstat_readability(text, measure = "meanSentenceLength"))
speeches
head(speeches)
View(speeches)
speeches  <- readRDS(gzcon(url("https://github.com/cjbarrie/CTA-ED/blob/main/data/comparison-complexity/speeches.rds?raw=true")))
speeches$flesch.kincaid <- textstat_readability(speeches$text, measure = "Flesch.Kincaid")
# returned as quanteda data.frame with document-level information;
# need just the score:
speeches$flesch.kincaid <- speeches$flesch.kincaid$Flesch.Kincaid
# specify different complexity measures to explore
speeches <- speeches %>%
mutate(meansentencelength = textstat_readability(text, measure = "meanSentenceLength"),
meanwordsyllables = textstat_readability(text, measure = "meanSentenceLength"),
flesch = textstat_readability(text, measure = "Flesch"))
View(speeches)
names(speeches)
View(speeches)
# keep only the scores for the complexity measures (not the document identifier)
speeches <- speeches %>%
mutate(meansentencelength = meansentencelength$meanSentenceLength)
View(speeches)
speeches <- speeches %>%
mutate(meansentencelength = textstat_readability(text, measure = "meanSentenceLength"),
meanwordsyllables = textstat_readability(text, measure = "meanWordSyllables"),
flesch = textstat_readability(text, measure = "Flesch"))
names(speeches)
# keep only the scores for the complexity measures (not the document identifier)
speeches <- speeches %>%
mutate(meansentencelength = meansentencelength$meanSentenceLength,
meanwordsyllables = meanwordsyllables$meanWordSyllables,
flesch = flesch$Flesch)
View(speeches)
sum_corpus <- speeches %>%
group_by(speaker) %>%
summarise(
across(c(flesch.kincaid:flesh), ~mean(na.rm=TRUE), .names = "mean_{.col}"),
across(c(flesch.kincaid:flesh), ~sd(na.rm=TRUE), .names = "n_{.col}"),
across(c(flesch.kincaid:flesh), ~length(speaker), .names = "n_{.col}"))
#get mean and standard deviation for each, and N of speeches for each speaker
sum_corpus <- speeches %>%
group_by(speaker) %>%
summarise(
across(c(flesch.kincaid:flesch), ~mean(na.rm=TRUE), .names = "mean_{.col}"),
across(c(flesch.kincaid:flesch), ~sd(na.rm=TRUE), .names = "n_{.col}"),
across(c(flesch.kincaid:flesch), ~length(speaker), .names = "n_{.col}"))
sum_corpus <- speeches %>%
group_by(speaker) %>%
summarise(
across(c(flesch.kincaid, meansentencelength, meanwordsyllables, flesch), ~mean(na.rm=TRUE), .names = "mean_{.col}"))
#get mean and standard deviation for each, and N of speeches for each speaker
sum_corpus <- speeches %>%
group_by(speaker) %>%
summarise(
across(c(flesch.kincaid, meansentencelength, meanwordsyllables, flesch), ~mean(.x, na.rm=TRUE), .names = "mean_{.col}"))
sum_corpus
sum_corpus <- speeches %>%
group_by(speaker) %>%
summarise(
across(c(flesch.kincaid, meansentencelength, meanwordsyllables, flesch),
~mean(.x, na.rm=TRUE), .names = "mean_{.col}"),
across(c(flesch.kincaid, meansentencelength, meanwordsyllables, flesch),
~sd(.x, na.rm=TRUE), .names = "sd_{.col}"))
sum_corpus
#get mean and standard deviation for each, and N of speeches for each speaker
sum_corpus <- speeches %>%
group_by(speaker) %>%
summarise(
across(c(flesch.kincaid, meansentencelength, meanwordsyllables, flesch),
~mean(.x, na.rm=TRUE), .names = "mean_{.col}"),
across(c(flesch.kincaid, meansentencelength, meanwordsyllables, flesch),
~sd(.x, na.rm=TRUE), .names = "sd_{.col}"),
n=length(speaker))
sum_corpus
sum_corpus <- sum_corpus %>%
mutate(se_flesch.kincaid = sd_flesch.kincaid/sqrt(n))
sum_corpus
sum_corpus <- sum_corpus %>%
mutate(# standard errors
se_flesch.kincaid = sd_flesch.kincaid/sqrt(n),
se_meansentencelength = sd_meansentencelength/sqrt(n),
se_meanwordsyllables = sd_meanwordsyllables/sqrt(n),
se_flesch = sd_flesch/sqrt(n),
# lower brackets of confidence interval
min_flesch.kincaid = mean_flesch.kincaid - 1.96*se_flesch.kincaid,
min_meansentencelength = mean_meansentencelength - 1.96*se_meansentencelength,
min_meanwordsyllables = mean_meanwordsyllables - 1.96*se_meanwordsyllables,
min_flesch = mean_flesch - 1.96*se_flesch)
sum_corpus
sum_corpus <- sum_corpus %>%
mutate(# standard errors
se_flesch.kincaid = sd_flesch.kincaid/sqrt(n),
se_meansentencelength = sd_meansentencelength/sqrt(n),
se_meanwordsyllables = sd_meanwordsyllables/sqrt(n),
se_flesch = sd_flesch/sqrt(n),
# lower brackets of confidence intervals
min_flesch.kincaid = mean_flesch.kincaid - 1.96*se_flesch.kincaid,
min_meansentencelength = mean_meansentencelength - 1.96*se_meansentencelength,
min_meanwordsyllables = mean_meanwordsyllables - 1.96*se_meanwordsyllables,
min_flesch = mean_flesch - 1.96*se_flesch,
# upper brackets of confidence intervals
max_flesch.kincaid = mean_flesch.kincaid + 1.96*se_flesch.kincaid,
max_meansentencelength = mean_meansentencelength + 1.96*se_meansentencelength,
max_meanwordsyllables = mean_meanwordsyllables + 1.96*se_meanwordsyllables,
max_flesch = mean_flesch + 1.96*se_flesch)
names(sum_corpus)
sum_corpus_long <- sum_corpus %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("measure", "method"),
names_pattern = "(.*)_(.*)",
values_to = "values")
library(tidyverse) # I add this as I need it for the exercise
sum_corpus_long <- sum_corpus %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("measure", "method"),
names_pattern = "(.*)_(.*)",
values_to = "values")
sum_corpus_long
sum_corpus_long2 <- sum_corpus %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "_(.*)")
sum_corpus_long2
sum_corpus
sum_corpus_long
sum_corpus %>%
select(speaker, n, str_detect("mean")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "mean_(.*)",
values_to = "mean")
sum_corpus %>%
select(speaker, n, matches("mean")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "mean_(.*)",
values_to = "mean")
sum_corpus %>%
select(speaker, n, matches("mean"))
sum_corpus %>%
select(speaker, n, matches("mean_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "mean_(.*)",
values_to = "mean")
sum_corpus_long_min <- sum_corpus %>%
select(speaker, n, matches("min_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "min_(.*)",
values_to = "min")
sum_corpus_long_min
sum_corpus_long_max <- sum_corpus %>%
select(speaker, n, matches("max_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "max_(.*)",
values_to = "max")
# merge all
corpus_long_max <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c(speaker, n, method))
sum_corpus_long_mean <- sum_corpus %>%
select(speaker, n, matches("mean_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "mean_(.*)",
values_to = "mean")
# merge all
corpus_long_max <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c(speaker, n, method))
sum_corpus_long_mean
# pivot lower confidence interval brackets
sum_corpus_long_min <- sum_corpus %>%
select(speaker, n, matches("min_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "min_(.*)",
values_to = "min")
# pivot upper confidence interval brackets
sum_corpus_long_max <- sum_corpus %>%
select(speaker, n, matches("max_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "max_(.*)",
values_to = "max")
# merge all
corpus_long_max <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c("speaker", "n", "method"))
corpus_long_max
# merge all
sum_corpus_long <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c("speaker", "n", "method")) %>%
full_join(sum_corpus_long_max, by=c("speaker", "n", "method")) %>%
# merge all
sum_corpus_long <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c("speaker", "n", "method")) %>%
full_join(sum_corpus_long_max, by=c("speaker", "n", "method")) %>%
sum_corpus_long
sum_corpus_long
# pivot means
sum_corpus_long_mean <- sum_corpus %>%
select(speaker, n, matches("mean_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "mean_(.*)",
values_to = "mean")
# pivot lower confidence interval brackets
sum_corpus_long_min <- sum_corpus %>%
select(speaker, n, matches("min_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "min_(.*)",
values_to = "min")
# pivot upper confidence interval brackets
sum_corpus_long_max <- sum_corpus %>%
select(speaker, n, matches("max_")) %>%
pivot_longer(cols = !c(speaker, n),
names_to = c("method"),
names_pattern = "max_(.*)",
values_to = "max")
# merge all
sum_corpus_long <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c("speaker", "n", "method")) %>%
full_join(sum_corpus_long_max, by=c("speaker", "n", "method")) %>%
# merge all
sum_corpus_long <- sum_corpus_long_mean %>%
full_join(sum_corpus_long_min, by=c("speaker", "n", "method")) %>%
full_join(sum_corpus_long_max, by=c("speaker", "n", "method"))
sum_corpus_long
sum_corpus_long %>%
ggplot(aes(x=speaker, y=values, colour=method)) +
geom_bar(stat="identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal() +
ylim(c(0,20))
sum_corpus_long %>%
ggplot(aes(x=speaker, y=mean, colour=method)) +
geom_bar(stat="identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal() +
ylim(c(0,20))
sum_corpus_long %>%
ggplot(aes(x=speaker, y=mean, group=method, colour=method)) +
geom_bar(stat="identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal() +
ylim(c(0,20))
sum_corpus_long %>%
ggplot(aes(x=method, y=mean, colour=method)) +
geom_column() +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~speaker)
sum_corpus_long %>%
ggplot(aes(x=method, y=mean, colour=method)) +
geom_bar() +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~speaker)
sum_corpus_long %>%
ggplot(aes(x=method, y=mean, colour=method)) +
geom_bar(stat = "identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~speaker) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal() +
ylim(c(0,20))
sum_corpus_long %>%
ggplot(aes(x=speaker, y=mean, colour=speaker)) +
geom_bar(stat = "identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~method) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal() +
ylim(c(0,20))
sum_corpus_long %>%
ggplot(aes(x=speaker, y=mean, colour=speaker)) +
geom_bar(stat = "identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~method) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal()
sum_corpus_long %>%
ggplot(aes(x=speaker, y=mean, fill=speaker)) +
geom_bar(stat = "identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~method) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
theme_minimal()
sum_corpus_long %>%
ggplot(aes(x=speaker, y=mean, fill=speaker)) +
geom_bar(stat = "identity") +
geom_errorbar(ymin=sum_corpus_long$min,ymax=sum_corpus_long$max, width=.2) +
facet_wrap(~method) +
coord_flip() +
xlab("") +
ylab("Mean Complexity") +
guides(fill=FALSE) +
theme_minimal()
speeches$text[1]
